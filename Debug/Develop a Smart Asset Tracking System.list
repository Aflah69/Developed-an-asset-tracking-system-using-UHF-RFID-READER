
Develop a Smart Asset Tracking System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004164  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004344  08004344  00005344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c8  080043c8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  0800442c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800442c  00006354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf6f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5f  00000000  00000000  00012ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00014e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b9  00000000  00000000  00015870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c56b  00000000  00000000  00016029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c47f  00000000  00000000  00032594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4d4a  00000000  00000000  0003ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f375d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d3c  00000000  00000000  000f37a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000f64dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800432c 	.word	0x0800432c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800432c 	.word	0x0800432c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fb12 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f853 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f933 	bl	8000828 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c2:	f000 f89b 	bl	80006fc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005c6:	f000 f8e3 	bl	8000790 <MX_USART1_UART_Init>
  while (1)
   {
		char data[2];
		char i;

  	  if(HAL_UART_Receive(&huart1, rfidData,14, 500)==HAL_OK)
 80005ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005ce:	220e      	movs	r2, #14
 80005d0:	491f      	ldr	r1, [pc, #124]	@ (8000650 <main+0xa0>)
 80005d2:	4820      	ldr	r0, [pc, #128]	@ (8000654 <main+0xa4>)
 80005d4:	f001 ffb0 	bl	8002538 <HAL_UART_Receive>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d134      	bne.n	8000648 <main+0x98>
  	    {
  	       rfidData[14]=NULL;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <main+0xa0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	739a      	strb	r2, [r3, #14]
  	       for(i=0;i<14;i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	e019      	b.n	800061e <main+0x6e>
  	        {
  		       sprintf(data,"%x",rfidData[i]);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <main+0xa0>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	461a      	mov	r2, r3
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4918      	ldr	r1, [pc, #96]	@ (8000658 <main+0xa8>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f9f8 	bl	80039ec <siprintf>
               HAL_UART_Transmit(&hlpuart1, (uint8_t*)data, 1, HAL_MAX_DELAY);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000602:	2201      	movs	r2, #1
 8000604:	4815      	ldr	r0, [pc, #84]	@ (800065c <main+0xac>)
 8000606:	f001 ff09 	bl	800241c <HAL_UART_Transmit>
               HAL_UART_Transmit(&huart1, (uint8_t*)data, 1, HAL_MAX_DELAY);
 800060a:	1d39      	adds	r1, r7, #4
 800060c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000610:	2201      	movs	r2, #1
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <main+0xa4>)
 8000614:	f001 ff02 	bl	800241c <HAL_UART_Transmit>
  	       for(i=0;i<14;i++)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d9e2      	bls.n	80005ea <main+0x3a>
  	         }
               HAL_UART_Transmit(&hlpuart1,"\n", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000628:	2201      	movs	r2, #1
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <main+0xb0>)
 800062c:	480b      	ldr	r0, [pc, #44]	@ (800065c <main+0xac>)
 800062e:	f001 fef5 	bl	800241c <HAL_UART_Transmit>
               HAL_UART_Transmit(&huart1,"\n", 1, HAL_MAX_DELAY);
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000636:	2201      	movs	r2, #1
 8000638:	4909      	ldr	r1, [pc, #36]	@ (8000660 <main+0xb0>)
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0xa4>)
 800063c:	f001 feee 	bl	800241c <HAL_UART_Transmit>
               strcpy( rfidData,"");
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <main+0xa0>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e7c0      	b.n	80005ca <main+0x1a>
  	     }
  	  else
  	    {
               HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fb39 	bl	8000cc0 <HAL_Delay>
   {
 800064e:	e7bc      	b.n	80005ca <main+0x1a>
 8000650:	20000078 	.word	0x20000078
 8000654:	20000170 	.word	0x20000170
 8000658:	08004344 	.word	0x08004344
 800065c:	200000dc 	.word	0x200000dc
 8000660:	08004348 	.word	0x08004348

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2238      	movs	r2, #56	@ 0x38
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f9da 	bl	8003a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fea6 	bl	80013d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2340      	movs	r3, #64	@ 0x40
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006a6:	2355      	movs	r3, #85	@ 0x55
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 ff40 	bl	8001540 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006c6:	f000 f915 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2104      	movs	r1, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fa3e 	bl	8001b64 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ee:	f000 f901 	bl	80008f4 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000700:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	@ (800078c <MX_LPUART1_UART_Init+0x90>)
 8000704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073e:	4812      	ldr	r0, [pc, #72]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f001 fe1c 	bl	800237c <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f8d3 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	f003 f880 	bl	8003856 <HAL_UARTEx_SetTxFifoThreshold>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800075c:	f000 f8ca 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4809      	ldr	r0, [pc, #36]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f003 f8b5 	bl	80038d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800076e:	f000 f8c1 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f003 f836 	bl	80037e4 <HAL_UARTEx_DisableFifoMode>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800077e:	f000 f8b9 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000dc 	.word	0x200000dc
 800078c:	40008000 	.word	0x40008000

08000790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 8000796:	4a23      	ldr	r2, [pc, #140]	@ (8000824 <MX_USART1_UART_Init+0x94>)
 8000798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 800079c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d8:	4811      	ldr	r0, [pc, #68]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007da:	f001 fdcf 	bl	800237c <HAL_UART_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f886 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007ec:	f003 f833 	bl	8003856 <HAL_UARTEx_SetTxFifoThreshold>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007f6:	f000 f87d 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4808      	ldr	r0, [pc, #32]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 80007fe:	f003 f868 	bl	80038d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000808:	f000 f874 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_USART1_UART_Init+0x90>)
 800080e:	f002 ffe9 	bl	80037e4 <HAL_UARTEx_DisableFifoMode>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000818:	f000 f86c 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000170 	.word	0x20000170
 8000824:	40013800 	.word	0x40013800

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a24      	ldr	r2, [pc, #144]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f000 fd7f 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_GPIO_Init+0xc8>)
 80008c2:	f000 fbef 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f000 fbe0 	bl	80010a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	@ 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f000 fdf3 	bl	8001520 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	@ 0x70
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	2244      	movs	r2, #68	@ 0x44
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 f85f 	bl	8003a2c <memset>
  if(huart->Instance==LPUART1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <HAL_UART_MspInit+0x130>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d137      	bne.n	80009e8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000978:	2320      	movs	r3, #32
 800097a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0318 	add.w	r3, r7, #24
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fb09 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ffb0 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000994:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000998:	4a38      	ldr	r2, [pc, #224]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009a0:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 80009a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b8:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009d4:	230c      	movs	r3, #12
 80009d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f000 fb5f 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009e6:	e042      	b.n	8000a6e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a24      	ldr	r2, [pc, #144]	@ (8000a80 <HAL_UART_MspInit+0x138>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d13d      	bne.n	8000a6e <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 facc 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000a0a:	f7ff ff73 	bl	80008f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a12:	4a1a      	ldr	r2, [pc, #104]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_UART_MspInit+0x134>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a3e:	2330      	movs	r3, #48	@ 0x30
 8000a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a56:	4619      	mov	r1, r3
 8000a58:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <HAL_UART_MspInit+0x13c>)
 8000a5a:	f000 fb23 	bl	80010a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2025      	movs	r0, #37	@ 0x25
 8000a64:	f000 fa29 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a68:	2025      	movs	r0, #37	@ 0x25
 8000a6a:	f000 fa40 	bl	8000eee <HAL_NVIC_EnableIRQ>
}
 8000a6e:	bf00      	nop
 8000a70:	3770      	adds	r7, #112	@ 0x70
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40008000 	.word	0x40008000
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40013800 	.word	0x40013800
 8000a84:	48000800 	.word	0x48000800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f8d1 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <USART1_IRQHandler+0x10>)
 8000aee:	f001 fdeb 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000170 	.word	0x20000170

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 ff86 	bl	8003a3c <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20008000 	.word	0x20008000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	20000204 	.word	0x20000204
 8000b64:	20000358 	.word	0x20000358

08000b68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 ff45 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fcf7 	bl	80005b0 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bd0:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8000bd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd8:	20000354 	.word	0x20000354

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f95b 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f80e 	bl	8000c10 <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c00:	f7ff fe7e 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	79fb      	ldrb	r3, [r7, #7]

}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <HAL_InitTick+0x68>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d022      	beq.n	8000c6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_InitTick+0x6c>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_InitTick+0x68>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f966 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10f      	bne.n	8000c64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d809      	bhi.n	8000c5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c52:	f000 f932 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_InitTick+0x70>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e004      	b.n	8000c6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e001      	b.n	8000c6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a03      	ldr	r2, [pc, #12]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000208 	.word	0x20000208
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000208 	.word	0x20000208

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cd8:	d004      	beq.n	8000ce4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_Delay+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce4:	bf00      	nop
 8000ce6:	f7ff ffdf 	bl	8000ca8 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d8f7      	bhi.n	8000ce6 <HAL_Delay+0x26>
  {
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000008 	.word	0x20000008

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	@ (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	@ 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff40 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff33 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa4 	bl	8000e60 <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d005      	beq.n	8000f46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e037      	b.n	8000fb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020e 	bic.w	r2, r2, #14
 8000f54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f003 021f 	and.w	r2, r3, #31
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000faa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d00d      	beq.n	8001008 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e047      	b.n	8001098 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 020e 	bic.w	r2, r2, #14
 8001016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001032:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001054:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00c      	beq.n	8001078 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800106c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001076:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
    }
  }
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010b2:	e15a      	b.n	800136a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 814c 	beq.w	8001364 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f003 0201 	and.w	r2, r3, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	6939      	ldr	r1, [r7, #16]
 80011d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0203 	and.w	r2, r3, #3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80a6 	beq.w	8001364 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <HAL_GPIO_Init+0x2e4>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121c:	4a5a      	ldr	r2, [pc, #360]	@ (8001388 <HAL_GPIO_Init+0x2e4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6613      	str	r3, [r2, #96]	@ 0x60
 8001224:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <HAL_GPIO_Init+0x2e4>)
 8001226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001230:	4a56      	ldr	r2, [pc, #344]	@ (800138c <HAL_GPIO_Init+0x2e8>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800125a:	d01f      	beq.n	800129c <HAL_GPIO_Init+0x1f8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x2ec>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d019      	beq.n	8001298 <HAL_GPIO_Init+0x1f4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4b      	ldr	r2, [pc, #300]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d013      	beq.n	8001294 <HAL_GPIO_Init+0x1f0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <HAL_GPIO_Init+0x2f4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d00d      	beq.n	8001290 <HAL_GPIO_Init+0x1ec>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a49      	ldr	r2, [pc, #292]	@ (800139c <HAL_GPIO_Init+0x2f8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d007      	beq.n	800128c <HAL_GPIO_Init+0x1e8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d101      	bne.n	8001288 <HAL_GPIO_Init+0x1e4>
 8001284:	2305      	movs	r3, #5
 8001286:	e00a      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001288:	2306      	movs	r3, #6
 800128a:	e008      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 800128c:	2304      	movs	r3, #4
 800128e:	e006      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001290:	2303      	movs	r3, #3
 8001292:	e004      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001294:	2302      	movs	r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 800129c:	2300      	movs	r3, #0
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	f002 0203 	and.w	r2, r2, #3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4093      	lsls	r3, r2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ae:	4937      	ldr	r1, [pc, #220]	@ (800138c <HAL_GPIO_Init+0x2e8>)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012bc:	4b39      	ldr	r3, [pc, #228]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e0:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800130a:	4a26      	ldr	r2, [pc, #152]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001334:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800135e:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f ae9d 	bne.w	80010b4 <HAL_GPIO_Init+0x10>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000
 8001390:	48000400 	.word	0x48000400
 8001394:	48000800 	.word	0x48000800
 8001398:	48000c00 	.word	0x48000c00
 800139c:	48001000 	.word	0x48001000
 80013a0:	48001400 	.word	0x48001400
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b8:	787b      	ldrb	r3, [r7, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d141      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f2:	d131      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f4:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013fa:	4a46      	ldr	r2, [pc, #280]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	4b43      	ldr	r3, [pc, #268]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140c:	4a41      	ldr	r2, [pc, #260]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001414:	4b40      	ldr	r3, [pc, #256]	@ (8001518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2232      	movs	r2, #50	@ 0x32
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	4a3f      	ldr	r2, [pc, #252]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142a:	e002      	b.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3b01      	subs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001432:	4b38      	ldr	r3, [pc, #224]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143e:	d102      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f2      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001446:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d158      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e057      	b.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145e:	4a2d      	ldr	r2, [pc, #180]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001468:	e04d      	b.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001470:	d141      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001472:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147e:	d131      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001498:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800149e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2232      	movs	r2, #50	@ 0x32
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4a1c      	ldr	r2, [pc, #112]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	0c9b      	lsrs	r3, r3, #18
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b6:	e002      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ca:	d102      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f2      	bne.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014de:	d112      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e011      	b.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014f4:	e007      	b.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001504:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40007000 	.word	0x40007000
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83

08001520 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152e:	6093      	str	r3, [r2, #8]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40007000 	.word	0x40007000

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e2fe      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d075      	beq.n	800164a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155e:	4b97      	ldr	r3, [pc, #604]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001568:	4b94      	ldr	r3, [pc, #592]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d102      	bne.n	800157e <HAL_RCC_OscConfig+0x3e>
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d002      	beq.n	8001584 <HAL_RCC_OscConfig+0x44>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b08      	cmp	r3, #8
 8001582:	d10b      	bne.n	800159c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	4b8d      	ldr	r3, [pc, #564]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d05b      	beq.n	8001648 <HAL_RCC_OscConfig+0x108>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d157      	bne.n	8001648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e2d9      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x74>
 80015a6:	4b85      	ldr	r3, [pc, #532]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a84      	ldr	r2, [pc, #528]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xb0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7e      	ldr	r2, [pc, #504]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7b      	ldr	r2, [pc, #492]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xb0>
 80015d8:	4b78      	ldr	r3, [pc, #480]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a77      	ldr	r2, [pc, #476]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a74      	ldr	r2, [pc, #464]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb56 	bl	8000ca8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fb52 	bl	8000ca8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e29e      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001612:	4b6a      	ldr	r3, [pc, #424]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xc0>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fb42 	bl	8000ca8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fb3e 	bl	8000ca8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	@ 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e28a      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0xe8>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d075      	beq.n	8001742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b59      	ldr	r3, [pc, #356]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001660:	4b56      	ldr	r3, [pc, #344]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0x136>
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d002      	beq.n	800167c <HAL_RCC_OscConfig+0x13c>
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d11f      	bne.n	80016bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167c:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x154>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e25d      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b49      	ldr	r3, [pc, #292]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	4946      	ldr	r1, [pc, #280]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016a8:	4b45      	ldr	r3, [pc, #276]	@ (80017c0 <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff faaf 	bl	8000c10 <HAL_InitTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d043      	beq.n	8001740 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e249      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a3c      	ldr	r2, [pc, #240]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff faea 	bl	8000ca8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fae6 	bl	8000ca8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e232      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	061b      	lsls	r3, r3, #24
 8001704:	492d      	ldr	r1, [pc, #180]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e01a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170c:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2a      	ldr	r2, [pc, #168]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fac6 	bl	8000ca8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fac2 	bl	8000ca8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e20e      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001732:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1e0>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d041      	beq.n	80017d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01c      	beq.n	8001790 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fa9f 	bl	8000ca8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fa9b 	bl	8000ca8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1e7      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0ef      	beq.n	800176e <HAL_RCC_OscConfig+0x22e>
 800178e:	e020      	b.n	80017d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001796:	4a09      	ldr	r2, [pc, #36]	@ (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa82 	bl	8000ca8 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a6:	e00d      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fa7e 	bl	8000ca8 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d906      	bls.n	80017c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1ca      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c4:	4b8c      	ldr	r3, [pc, #560]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ea      	bne.n	80017a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80a6 	beq.w	800192c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017e4:	4b84      	ldr	r3, [pc, #528]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2b4>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x2b6>
 80017f4:	2300      	movs	r3, #0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b7f      	ldr	r3, [pc, #508]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a7e      	ldr	r2, [pc, #504]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b7c      	ldr	r3, [pc, #496]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	4b79      	ldr	r3, [pc, #484]	@ (80019fc <HAL_RCC_OscConfig+0x4bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001822:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <HAL_RCC_OscConfig+0x4bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a75      	ldr	r2, [pc, #468]	@ (80019fc <HAL_RCC_OscConfig+0x4bc>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff fa3b 	bl	8000ca8 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff fa37 	bl	8000ca8 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e183      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	4b6c      	ldr	r3, [pc, #432]	@ (80019fc <HAL_RCC_OscConfig+0x4bc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_RCC_OscConfig+0x32e>
 800185c:	4b66      	ldr	r3, [pc, #408]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001862:	4a65      	ldr	r2, [pc, #404]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800186c:	e024      	b.n	80018b8 <HAL_RCC_OscConfig+0x378>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d110      	bne.n	8001898 <HAL_RCC_OscConfig+0x358>
 8001876:	4b60      	ldr	r3, [pc, #384]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187c:	4a5e      	ldr	r2, [pc, #376]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001886:	4b5c      	ldr	r3, [pc, #368]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188c:	4a5a      	ldr	r2, [pc, #360]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001896:	e00f      	b.n	80018b8 <HAL_RCC_OscConfig+0x378>
 8001898:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189e:	4a56      	ldr	r2, [pc, #344]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ae:	4a52      	ldr	r2, [pc, #328]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d016      	beq.n	80018ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff f9f2 	bl	8000ca8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9ee 	bl	8000ca8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e138      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018de:	4b46      	ldr	r3, [pc, #280]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ed      	beq.n	80018c8 <HAL_RCC_OscConfig+0x388>
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9db 	bl	8000ca8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff f9d7 	bl	8000ca8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e121      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190c:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ed      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001920:	4b35      	ldr	r3, [pc, #212]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01c      	beq.n	800197a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001940:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001946:	4a2c      	ldr	r2, [pc, #176]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f9aa 	bl	8000ca8 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001958:	f7ff f9a6 	bl	8000ca8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0f2      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800196c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ef      	beq.n	8001958 <HAL_RCC_OscConfig+0x418>
 8001978:	e01b      	b.n	80019b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 800197c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001980:	4a1d      	ldr	r2, [pc, #116]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff f98d 	bl	8000ca8 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001992:	f7ff f989 	bl	8000ca8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0d5      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80c9 	beq.w	8001b4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	f000 8083 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d15e      	bne.n	8001a90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f963 	bl	8000ca8 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e00c      	b.n	8001a00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f95f 	bl	8000ca8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d905      	bls.n	8001a00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0ab      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ec      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	4b52      	ldr	r3, [pc, #328]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <HAL_RCC_OscConfig+0x61c>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6a11      	ldr	r1, [r2, #32]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a26:	0212      	lsls	r2, r2, #8
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a2e:	0852      	lsrs	r2, r2, #1
 8001a30:	3a01      	subs	r2, #1
 8001a32:	0552      	lsls	r2, r2, #21
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a3a:	0852      	lsrs	r2, r2, #1
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	0652      	lsls	r2, r2, #25
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a46:	06d2      	lsls	r2, r2, #27
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4943      	ldr	r1, [pc, #268]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a50:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a40      	ldr	r2, [pc, #256]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a3d      	ldr	r2, [pc, #244]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f91e 	bl	8000ca8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f91a 	bl	8000ca8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e066      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x530>
 8001a8e:	e05e      	b.n	8001b4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a30      	ldr	r2, [pc, #192]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f904 	bl	8000ca8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f900 	bl	8000ca8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04c      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab6:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4924      	ldr	r1, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001ac8:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <HAL_RCC_OscConfig+0x620>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60cb      	str	r3, [r1, #12]
 8001ace:	e03e      	b.n	8001b4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e039      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_RCC_OscConfig+0x618>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d12c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	3b01      	subs	r3, #1
 8001afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d123      	bne.n	8001b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11b      	bne.n	8001b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d113      	bne.n	8001b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	019f800c 	.word	0x019f800c
 8001b60:	feeefffc 	.word	0xfeeefffc

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e11e      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b91      	ldr	r3, [pc, #580]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 020f 	bic.w	r2, r3, #15
 8001b92:	498c      	ldr	r1, [pc, #560]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b8a      	ldr	r3, [pc, #552]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e106      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d073      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d129      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc0:	4b81      	ldr	r3, [pc, #516]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0f4      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bd0:	f000 f99e 	bl	8001f10 <RCC_GetSysClockFreqFromPLLSource>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4a7c      	ldr	r2, [pc, #496]	@ (8001dcc <HAL_RCC_ClockConfig+0x268>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d93f      	bls.n	8001c5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bde:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d033      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d12f      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bfe:	4b72      	ldr	r3, [pc, #456]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c06:	4a70      	ldr	r2, [pc, #448]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e024      	b.n	8001c5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0c6      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0be      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c3c:	f000 f8ce 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4a61      	ldr	r2, [pc, #388]	@ (8001dcc <HAL_RCC_ClockConfig+0x268>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d909      	bls.n	8001c5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c52:	4a5d      	ldr	r2, [pc, #372]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4957      	ldr	r1, [pc, #348]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c70:	f7ff f81a 	bl	8000ca8 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff f816 	bl	8000ca8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e095      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d023      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb8:	4b43      	ldr	r3, [pc, #268]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a42      	ldr	r2, [pc, #264]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4936      	ldr	r1, [pc, #216]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b80      	cmp	r3, #128	@ 0x80
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cfa:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4a32      	ldr	r2, [pc, #200]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d06:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d21d      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d14:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 020f 	bic.w	r2, r3, #15
 8001d1c:	4929      	ldr	r1, [pc, #164]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d24:	f7fe ffc0 	bl	8000ca8 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7fe ffbc 	bl	8000ca8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e03b      	b.n	8001dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1ed      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4917      	ldr	r1, [pc, #92]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490f      	ldr	r1, [pc, #60]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8e:	f000 f825 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <HAL_RCC_ClockConfig+0x26c>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x270>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_ClockConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ff2c 	bl	8000c10 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	04c4b400 	.word	0x04c4b400
 8001dd0:	0800434c 	.word	0x0800434c
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001de2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e047      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e00:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e03e      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e06:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d136      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e30:	4a1a      	ldr	r2, [pc, #104]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e3a:	68d2      	ldr	r2, [r2, #12]
 8001e3c:	0a12      	lsrs	r2, r2, #8
 8001e3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
      break;
 8001e48:	e00c      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4a:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e54:	68d2      	ldr	r2, [r2, #12]
 8001e56:	0a12      	lsrs	r2, r2, #8
 8001e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0e5b      	lsrs	r3, r3, #25
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e001      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e84:	693b      	ldr	r3, [r7, #16]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	016e3600 	.word	0x016e3600

08001ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4904      	ldr	r1, [pc, #16]	@ (8001ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	0800435c 	.word	0x0800435c

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee8:	f7ff ffda 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0adb      	lsrs	r3, r3, #11
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4904      	ldr	r1, [pc, #16]	@ (8001f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	0800435c 	.word	0x0800435c

08001f10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d10c      	bne.n	8001f4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f34:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f3e:	68d2      	ldr	r2, [r2, #12]
 8001f40:	0a12      	lsrs	r2, r2, #8
 8001f42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
    break;
 8001f4c:	e00c      	b.n	8001f68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f4e:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f58:	68d2      	ldr	r2, [r2, #12]
 8001f5a:	0a12      	lsrs	r2, r2, #8
 8001f5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
    break;
 8001f66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0e5b      	lsrs	r3, r3, #25
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	3301      	adds	r3, #1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f82:	687b      	ldr	r3, [r7, #4]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40021000 	.word	0x40021000
 8001f94:	016e3600 	.word	0x016e3600
 8001f98:	00f42400 	.word	0x00f42400

08001f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa8:	2300      	movs	r3, #0
 8001faa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8098 	beq.w	80020ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbe:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a39      	ldr	r2, [pc, #228]	@ (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff2:	f7fe fe59 	bl	8000ca8 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ff8:	e009      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7fe fe55 	bl	8000ca8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d902      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	74fb      	strb	r3, [r7, #19]
        break;
 800200c:	e005      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800200e:	4b30      	ldr	r3, [pc, #192]	@ (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ef      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d159      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01e      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	d019      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800203c:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002048:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002058:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205e:	4a1b      	ldr	r2, [pc, #108]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207a:	f7fe fe15 	bl	8000ca8 <HAL_GetTick>
 800207e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002080:	e00b      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe fe11 	bl	8000ca8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d902      	bls.n	800209a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	74fb      	strb	r3, [r7, #19]
            break;
 8002098:	e006      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209a:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ec      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020c4:	e008      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	74bb      	strb	r3, [r7, #18]
 80020ca:	e005      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d8:	7c7b      	ldrb	r3, [r7, #17]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4ba6      	ldr	r3, [pc, #664]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	4aa5      	ldr	r2, [pc, #660]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f6:	4ba0      	ldr	r3, [pc, #640]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	499c      	ldr	r1, [pc, #624]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002118:	4b97      	ldr	r3, [pc, #604]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f023 020c 	bic.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4994      	ldr	r1, [pc, #592]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800213a:	4b8f      	ldr	r3, [pc, #572]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002140:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	498b      	ldr	r1, [pc, #556]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800215c:	4b86      	ldr	r3, [pc, #536]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	4983      	ldr	r1, [pc, #524]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217e:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	497a      	ldr	r1, [pc, #488]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a0:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4972      	ldr	r1, [pc, #456]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4969      	ldr	r1, [pc, #420]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4961      	ldr	r1, [pc, #388]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002206:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	4958      	ldr	r1, [pc, #352]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002228:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	4950      	ldr	r1, [pc, #320]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002246:	d105      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002248:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002252:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225c:	2b00      	cmp	r3, #0
 800225e:	d015      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002260:	4b45      	ldr	r3, [pc, #276]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	4942      	ldr	r1, [pc, #264]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800227e:	d105      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002280:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a3c      	ldr	r2, [pc, #240]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002298:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4934      	ldr	r1, [pc, #208]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b6:	d105      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d0:	4b29      	ldr	r3, [pc, #164]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022de:	4926      	ldr	r1, [pc, #152]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a20      	ldr	r2, [pc, #128]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002316:	4918      	ldr	r1, [pc, #96]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002326:	d105      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002332:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002340:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234e:	490a      	ldr	r1, [pc, #40]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800235e:	d105      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800236c:	7cbb      	ldrb	r3, [r7, #18]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e042      	b.n	8002414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fad1 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2224      	movs	r2, #36	@ 0x24
 80023aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 ff8e 	bl	80032e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fcbf 	bl	8002d50 <UART_SetConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e01b      	b.n	8002414 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f001 f80d 	bl	800342c <UART_CheckIdleState>
 8002412:	4603      	mov	r3, r0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	2b20      	cmp	r3, #32
 8002434:	d17b      	bne.n	800252e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_UART_Transmit+0x26>
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e074      	b.n	8002530 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	@ 0x21
 8002452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002456:	f7fe fc27 	bl	8000ca8 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002474:	d108      	bne.n	8002488 <HAL_UART_Transmit+0x6c>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e003      	b.n	8002490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002490:	e030      	b.n	80024f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f001 f86f 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e03d      	b.n	8002530 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3302      	adds	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e007      	b.n	80024e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1c8      	bne.n	8002492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f001 f838 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e006      	b.n	8002530 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	@ 0x28
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800254e:	2b20      	cmp	r3, #32
 8002550:	f040 80b5 	bne.w	80026be <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_UART_Receive+0x28>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ad      	b.n	80026c0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2222      	movs	r2, #34	@ 0x22
 8002570:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800257a:	f7fe fb95 	bl	8000ca8 <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002598:	d10e      	bne.n	80025b8 <HAL_UART_Receive+0x80>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_UART_Receive+0x76>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80025a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025ac:	e02d      	b.n	800260a <HAL_UART_Receive+0xd2>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	22ff      	movs	r2, #255	@ 0xff
 80025b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025b6:	e028      	b.n	800260a <HAL_UART_Receive+0xd2>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10d      	bne.n	80025dc <HAL_UART_Receive+0xa4>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_UART_Receive+0x9a>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	@ 0xff
 80025cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025d0:	e01b      	b.n	800260a <HAL_UART_Receive+0xd2>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	227f      	movs	r2, #127	@ 0x7f
 80025d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025da:	e016      	b.n	800260a <HAL_UART_Receive+0xd2>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025e4:	d10d      	bne.n	8002602 <HAL_UART_Receive+0xca>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <HAL_UART_Receive+0xc0>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	227f      	movs	r2, #127	@ 0x7f
 80025f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025f6:	e008      	b.n	800260a <HAL_UART_Receive+0xd2>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	223f      	movs	r2, #63	@ 0x3f
 80025fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002600:	e003      	b.n	800260a <HAL_UART_Receive+0xd2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002610:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800261a:	d108      	bne.n	800262e <HAL_UART_Receive+0xf6>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	e003      	b.n	8002636 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002636:	e036      	b.n	80026a6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2200      	movs	r2, #0
 8002640:	2120      	movs	r1, #32
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 ff9c 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e032      	b.n	80026c0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10c      	bne.n	800267a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	b29a      	uxth	r2, r3
 8002668:	8a7b      	ldrh	r3, [r7, #18]
 800266a:	4013      	ands	r3, r2
 800266c:	b29a      	uxth	r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	3302      	adds	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e00c      	b.n	8002694 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	b2da      	uxtb	r2, r3
 8002682:	8a7b      	ldrh	r3, [r7, #18]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4013      	ands	r3, r2
 8002688:	b2da      	uxtb	r2, r3
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1c2      	bne.n	8002638 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0ba      	sub	sp, #232	@ 0xe8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80026f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80026f6:	4013      	ands	r3, r2
 80026f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80026fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11b      	bne.n	800273c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800271c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 82e3 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
      }
      return;
 800273a:	e2dd      	b.n	8002cf8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800273c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8123 	beq.w	800298c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002746:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800274a:	4b8d      	ldr	r3, [pc, #564]	@ (8002980 <HAL_UART_IRQHandler+0x2b8>)
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002756:	4b8b      	ldr	r3, [pc, #556]	@ (8002984 <HAL_UART_IRQHandler+0x2bc>)
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8116 	beq.w	800298c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d011      	beq.n	8002790 <HAL_UART_IRQHandler+0xc8>
 800276c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d011      	beq.n	80027c0 <HAL_UART_IRQHandler+0xf8>
 800279c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d011      	beq.n	80027f0 <HAL_UART_IRQHandler+0x128>
 80027cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2204      	movs	r2, #4
 80027de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002808:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800280c:	4b5c      	ldr	r3, [pc, #368]	@ (8002980 <HAL_UART_IRQHandler+0x2b8>)
 800280e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	f043 0208 	orr.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800282c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <HAL_UART_IRQHandler+0x196>
 8002838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800283c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00c      	beq.n	800285e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800284c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8249 	beq.w	8002cfc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800286a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b40      	cmp	r3, #64	@ 0x40
 80028b4:	d005      	beq.n	80028c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d054      	beq.n	800296c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fec9 	bl	800365a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d146      	bne.n	8002964 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3308      	adds	r3, #8
 80028dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3308      	adds	r3, #8
 80028fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002902:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800290e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002912:	e841 2300 	strex	r3, r2, [r1]
 8002916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800291a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1d9      	bne.n	80028d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002932:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <HAL_UART_IRQHandler+0x2c0>)
 8002934:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fb49 	bl	8000fd4 <HAL_DMA_Abort_IT>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002956:	4610      	mov	r0, r2
 8002958:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295a:	e00f      	b.n	800297c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f9e1 	bl	8002d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002962:	e00b      	b.n	800297c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f9dd 	bl	8002d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296a:	e007      	b.n	800297c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f9d9 	bl	8002d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800297a:	e1bf      	b.n	8002cfc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	bf00      	nop
    return;
 800297e:	e1bd      	b.n	8002cfc <HAL_UART_IRQHandler+0x634>
 8002980:	10000001 	.word	0x10000001
 8002984:	04000120 	.word	0x04000120
 8002988:	08003727 	.word	0x08003727

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002990:	2b01      	cmp	r3, #1
 8002992:	f040 8153 	bne.w	8002c3c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 814c 	beq.w	8002c3c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8145 	beq.w	8002c3c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b40      	cmp	r3, #64	@ 0x40
 80029c6:	f040 80bb 	bne.w	8002b40 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 818f 	beq.w	8002d00 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80029e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f080 8187 	bcs.w	8002d00 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 8087 	bne.w	8002b1e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a4a:	e841 2300 	strex	r3, r2, [r1]
 8002a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1da      	bne.n	8002a10 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3308      	adds	r3, #8
 8002a60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e1      	bne.n	8002a5a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e3      	bne.n	8002a96 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aec:	f023 0310 	bic.w	r3, r3, #16
 8002af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002afe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e4      	bne.n	8002adc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fa02 	bl	8000f22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8fd 	bl	8002d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b3e:	e0df      	b.n	8002d00 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80d1 	beq.w	8002d04 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80cc 	beq.w	8002d04 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e4      	bne.n	8002b6c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e1      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0310 	bic.w	r3, r3, #16
 8002c06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	69b9      	ldr	r1, [r7, #24]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	617b      	str	r3, [r7, #20]
   return(result);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e4      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f87f 	bl	8002d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3a:	e063      	b.n	8002d04 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <HAL_UART_IRQHandler+0x59e>
 8002c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fda2 	bl	80037a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c64:	e051      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d014      	beq.n	8002c9c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03a      	beq.n	8002d08 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
    }
    return;
 8002c9a:	e035      	b.n	8002d08 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_UART_IRQHandler+0x5f4>
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fd4c 	bl	8003752 <UART_EndTransmit_IT>
    return;
 8002cba:	e026      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_UART_IRQHandler+0x614>
 8002cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ccc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fd7b 	bl	80037d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cda:	e016      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_UART_IRQHandler+0x642>
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da0c      	bge.n	8002d0a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fd63 	bl	80037bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cf6:	e008      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
      return;
 8002cf8:	bf00      	nop
 8002cfa:	e006      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
    return;
 8002cfc:	bf00      	nop
 8002cfe:	e004      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
      return;
 8002d00:	bf00      	nop
 8002d02:	e002      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
      return;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <HAL_UART_IRQHandler+0x642>
    return;
 8002d08:	bf00      	nop
  }
}
 8002d0a:	37e8      	adds	r7, #232	@ 0xe8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d54:	b08c      	sub	sp, #48	@ 0x30
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4bab      	ldr	r3, [pc, #684]	@ (800302c <UART_SetConfig+0x2dc>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4aa0      	ldr	r2, [pc, #640]	@ (8003030 <UART_SetConfig+0x2e0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db8:	4313      	orrs	r3, r2
 8002dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002dc6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	f023 010f 	bic.w	r1, r3, #15
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a91      	ldr	r2, [pc, #580]	@ (8003034 <UART_SetConfig+0x2e4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d125      	bne.n	8002e40 <UART_SetConfig+0xf0>
 8002df4:	4b90      	ldr	r3, [pc, #576]	@ (8003038 <UART_SetConfig+0x2e8>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d81a      	bhi.n	8002e38 <UART_SetConfig+0xe8>
 8002e02:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <UART_SetConfig+0xb8>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	08002e21 	.word	0x08002e21
 8002e14:	08002e31 	.word	0x08002e31
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1e:	e0d6      	b.n	8002fce <UART_SetConfig+0x27e>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e26:	e0d2      	b.n	8002fce <UART_SetConfig+0x27e>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2e:	e0ce      	b.n	8002fce <UART_SetConfig+0x27e>
 8002e30:	2308      	movs	r3, #8
 8002e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e36:	e0ca      	b.n	8002fce <UART_SetConfig+0x27e>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3e:	e0c6      	b.n	8002fce <UART_SetConfig+0x27e>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7d      	ldr	r2, [pc, #500]	@ (800303c <UART_SetConfig+0x2ec>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d138      	bne.n	8002ebc <UART_SetConfig+0x16c>
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003038 <UART_SetConfig+0x2e8>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d82d      	bhi.n	8002eb4 <UART_SetConfig+0x164>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <UART_SetConfig+0x110>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e95 	.word	0x08002e95
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002eb5 	.word	0x08002eb5
 8002e6c:	08002eb5 	.word	0x08002eb5
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002eb5 	.word	0x08002eb5
 8002e78:	08002eb5 	.word	0x08002eb5
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002e9d 	.word	0x08002e9d
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002ead 	.word	0x08002ead
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9a:	e098      	b.n	8002fce <UART_SetConfig+0x27e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea2:	e094      	b.n	8002fce <UART_SetConfig+0x27e>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eaa:	e090      	b.n	8002fce <UART_SetConfig+0x27e>
 8002eac:	2308      	movs	r3, #8
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb2:	e08c      	b.n	8002fce <UART_SetConfig+0x27e>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eba:	e088      	b.n	8002fce <UART_SetConfig+0x27e>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8003040 <UART_SetConfig+0x2f0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d125      	bne.n	8002f12 <UART_SetConfig+0x1c2>
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <UART_SetConfig+0x2e8>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ed0:	2b30      	cmp	r3, #48	@ 0x30
 8002ed2:	d016      	beq.n	8002f02 <UART_SetConfig+0x1b2>
 8002ed4:	2b30      	cmp	r3, #48	@ 0x30
 8002ed6:	d818      	bhi.n	8002f0a <UART_SetConfig+0x1ba>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d00a      	beq.n	8002ef2 <UART_SetConfig+0x1a2>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d814      	bhi.n	8002f0a <UART_SetConfig+0x1ba>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <UART_SetConfig+0x19a>
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d008      	beq.n	8002efa <UART_SetConfig+0x1aa>
 8002ee8:	e00f      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef0:	e06d      	b.n	8002fce <UART_SetConfig+0x27e>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef8:	e069      	b.n	8002fce <UART_SetConfig+0x27e>
 8002efa:	2304      	movs	r3, #4
 8002efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f00:	e065      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f02:	2308      	movs	r3, #8
 8002f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f08:	e061      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f10:	e05d      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4b      	ldr	r2, [pc, #300]	@ (8003044 <UART_SetConfig+0x2f4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d125      	bne.n	8002f68 <UART_SetConfig+0x218>
 8002f1c:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <UART_SetConfig+0x2e8>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f28:	d016      	beq.n	8002f58 <UART_SetConfig+0x208>
 8002f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f2c:	d818      	bhi.n	8002f60 <UART_SetConfig+0x210>
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d00a      	beq.n	8002f48 <UART_SetConfig+0x1f8>
 8002f32:	2b80      	cmp	r3, #128	@ 0x80
 8002f34:	d814      	bhi.n	8002f60 <UART_SetConfig+0x210>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <UART_SetConfig+0x1f0>
 8002f3a:	2b40      	cmp	r3, #64	@ 0x40
 8002f3c:	d008      	beq.n	8002f50 <UART_SetConfig+0x200>
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x210>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f46:	e042      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4e:	e03e      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f56:	e03a      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5e:	e036      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f66:	e032      	b.n	8002fce <UART_SetConfig+0x27e>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a30      	ldr	r2, [pc, #192]	@ (8003030 <UART_SetConfig+0x2e0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12a      	bne.n	8002fc8 <UART_SetConfig+0x278>
 8002f72:	4b31      	ldr	r3, [pc, #196]	@ (8003038 <UART_SetConfig+0x2e8>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f80:	d01a      	beq.n	8002fb8 <UART_SetConfig+0x268>
 8002f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f86:	d81b      	bhi.n	8002fc0 <UART_SetConfig+0x270>
 8002f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f8c:	d00c      	beq.n	8002fa8 <UART_SetConfig+0x258>
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f92:	d815      	bhi.n	8002fc0 <UART_SetConfig+0x270>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <UART_SetConfig+0x250>
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9c:	d008      	beq.n	8002fb0 <UART_SetConfig+0x260>
 8002f9e:	e00f      	b.n	8002fc0 <UART_SetConfig+0x270>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa6:	e012      	b.n	8002fce <UART_SetConfig+0x27e>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fae:	e00e      	b.n	8002fce <UART_SetConfig+0x27e>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb6:	e00a      	b.n	8002fce <UART_SetConfig+0x27e>
 8002fb8:	2308      	movs	r3, #8
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fbe:	e006      	b.n	8002fce <UART_SetConfig+0x27e>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc6:	e002      	b.n	8002fce <UART_SetConfig+0x27e>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <UART_SetConfig+0x2e0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	f040 80a8 	bne.w	800312a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d834      	bhi.n	800304c <UART_SetConfig+0x2fc>
 8002fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <UART_SetConfig+0x298>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	0800304d 	.word	0x0800304d
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	0800304d 	.word	0x0800304d
 8002ff8:	0800301b 	.word	0x0800301b
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800304d 	.word	0x0800304d
 8003004:	0800304d 	.word	0x0800304d
 8003008:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7fe ff54 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8003010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003012:	e021      	b.n	8003058 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <UART_SetConfig+0x2f8>)
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003018:	e01e      	b.n	8003058 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7fe fedf 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800301e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003020:	e01a      	b.n	8003058 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003028:	e016      	b.n	8003058 <UART_SetConfig+0x308>
 800302a:	bf00      	nop
 800302c:	cfff69f3 	.word	0xcfff69f3
 8003030:	40008000 	.word	0x40008000
 8003034:	40013800 	.word	0x40013800
 8003038:	40021000 	.word	0x40021000
 800303c:	40004400 	.word	0x40004400
 8003040:	40004800 	.word	0x40004800
 8003044:	40004c00 	.word	0x40004c00
 8003048:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003056:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 812a 	beq.w	80032b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	4a9e      	ldr	r2, [pc, #632]	@ (80032e0 <UART_SetConfig+0x590>)
 8003066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800306a:	461a      	mov	r2, r3
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	429a      	cmp	r2, r3
 8003082:	d305      	bcc.n	8003090 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	429a      	cmp	r2, r3
 800308e:	d903      	bls.n	8003098 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003096:	e10d      	b.n	80032b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	2200      	movs	r2, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	60fa      	str	r2, [r7, #12]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	4a8e      	ldr	r2, [pc, #568]	@ (80032e0 <UART_SetConfig+0x590>)
 80030a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2200      	movs	r2, #0
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030ba:	f7fd f901 	bl	80002c0 <__aeabi_uldivmod>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	020b      	lsls	r3, r1, #8
 80030d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030d4:	0202      	lsls	r2, r0, #8
 80030d6:	6979      	ldr	r1, [r7, #20]
 80030d8:	6849      	ldr	r1, [r1, #4]
 80030da:	0849      	lsrs	r1, r1, #1
 80030dc:	2000      	movs	r0, #0
 80030de:	460c      	mov	r4, r1
 80030e0:	4605      	mov	r5, r0
 80030e2:	eb12 0804 	adds.w	r8, r2, r4
 80030e6:	eb43 0905 	adc.w	r9, r3, r5
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	469a      	mov	sl, r3
 80030f2:	4693      	mov	fp, r2
 80030f4:	4652      	mov	r2, sl
 80030f6:	465b      	mov	r3, fp
 80030f8:	4640      	mov	r0, r8
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800310e:	d308      	bcc.n	8003122 <UART_SetConfig+0x3d2>
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003116:	d204      	bcs.n	8003122 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e0c8      	b.n	80032b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003128:	e0c4      	b.n	80032b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003132:	d167      	bne.n	8003204 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003134:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003138:	2b08      	cmp	r3, #8
 800313a:	d828      	bhi.n	800318e <UART_SetConfig+0x43e>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <UART_SetConfig+0x3f4>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7fe fea6 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800316e:	e014      	b.n	800319a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7fe feb8 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8003174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003176:	e010      	b.n	800319a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b5a      	ldr	r3, [pc, #360]	@ (80032e4 <UART_SetConfig+0x594>)
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800317c:	e00d      	b.n	800319a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7fe fe2d 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8003182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003184:	e009      	b.n	800319a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800318c:	e005      	b.n	800319a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8089 	beq.w	80032b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	4a4e      	ldr	r2, [pc, #312]	@ (80032e0 <UART_SetConfig+0x590>)
 80031a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b4:	005a      	lsls	r2, r3, #1
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	441a      	add	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	d916      	bls.n	80031fc <UART_SetConfig+0x4ac>
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d4:	d212      	bcs.n	80031fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f023 030f 	bic.w	r3, r3, #15
 80031de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	8bfb      	ldrh	r3, [r7, #30]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	8bfa      	ldrh	r2, [r7, #30]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	e05b      	b.n	80032b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003202:	e057      	b.n	80032b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003204:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003208:	2b08      	cmp	r3, #8
 800320a:	d828      	bhi.n	800325e <UART_SetConfig+0x50e>
 800320c:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <UART_SetConfig+0x4c4>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003239 	.word	0x08003239
 8003218:	08003241 	.word	0x08003241
 800321c:	08003249 	.word	0x08003249
 8003220:	0800325f 	.word	0x0800325f
 8003224:	0800324f 	.word	0x0800324f
 8003228:	0800325f 	.word	0x0800325f
 800322c:	0800325f 	.word	0x0800325f
 8003230:	0800325f 	.word	0x0800325f
 8003234:	08003257 	.word	0x08003257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7fe fe3e 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 800323c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800323e:	e014      	b.n	800326a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003240:	f7fe fe50 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8003244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003246:	e010      	b.n	800326a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003248:	4b26      	ldr	r3, [pc, #152]	@ (80032e4 <UART_SetConfig+0x594>)
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800324c:	e00d      	b.n	800326a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324e:	f7fe fdc5 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8003252:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003254:	e009      	b.n	800326a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800325c:	e005      	b.n	800326a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003268:	bf00      	nop
    }

    if (pclk != 0U)
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d021      	beq.n	80032b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	4a1a      	ldr	r2, [pc, #104]	@ (80032e0 <UART_SetConfig+0x590>)
 8003276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	441a      	add	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d909      	bls.n	80032ae <UART_SetConfig+0x55e>
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d205      	bcs.n	80032ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e002      	b.n	80032b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2201      	movs	r2, #1
 80032c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3730      	adds	r7, #48	@ 0x30
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032de:	bf00      	nop
 80032e0:	08004364 	.word	0x08004364
 80032e4:	00f42400 	.word	0x00f42400

080032e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01a      	beq.n	80033fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e6:	d10a      	bne.n	80033fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b098      	sub	sp, #96	@ 0x60
 8003430:	af02      	add	r7, sp, #8
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800343c:	f7fd fc34 	bl	8000ca8 <HAL_GetTick>
 8003440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d12f      	bne.n	80034b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f88e 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d022      	beq.n	80034b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003488:	647b      	str	r3, [r7, #68]	@ 0x44
 800348a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800348e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e6      	bne.n	800346a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e063      	b.n	8003578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d149      	bne.n	8003552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f857 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03c      	beq.n	8003552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	623b      	str	r3, [r7, #32]
   return(result);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e6      	bne.n	80034d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3308      	adds	r3, #8
 8003510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60fb      	str	r3, [r7, #12]
   return(result);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3308      	adds	r3, #8
 8003528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800352a:	61fa      	str	r2, [r7, #28]
 800352c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	69b9      	ldr	r1, [r7, #24]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	617b      	str	r3, [r7, #20]
   return(result);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e5      	bne.n	800350a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e012      	b.n	8003578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3758      	adds	r7, #88	@ 0x58
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003590:	e04f      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003598:	d04b      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fd fb85 	bl	8000ca8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e04e      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d037      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b80      	cmp	r3, #128	@ 0x80
 80035c6:	d034      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d031      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d110      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2208      	movs	r2, #8
 80035e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f838 	bl	800365a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2208      	movs	r2, #8
 80035ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e029      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800360c:	d111      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f81e 	bl	800365a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e00f      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	429a      	cmp	r2, r3
 800364e:	d0a0      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365a:	b480      	push	{r7}
 800365c:	b095      	sub	sp, #84	@ 0x54
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003680:	643b      	str	r3, [r7, #64]	@ 0x40
 8003682:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e6      	bne.n	8003662 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e3      	bne.n	8003694 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d118      	bne.n	8003706 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e6      	bne.n	80036d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800371a:	bf00      	nop
 800371c:	3754      	adds	r7, #84	@ 0x54
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003732:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff faed 	bl	8002d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60bb      	str	r3, [r7, #8]
   return(result);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	613b      	str	r3, [r7, #16]
   return(result);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e6      	bne.n	800375a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fab8 	bl	8002d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a0:	bf00      	nop
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_UARTEx_DisableFifoMode+0x16>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e027      	b.n	800384a <HAL_UARTEx_DisableFifoMode+0x66>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2224      	movs	r2, #36	@ 0x24
 8003806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003828:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800386a:	2302      	movs	r3, #2
 800386c:	e02d      	b.n	80038ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2224      	movs	r2, #36	@ 0x24
 800387a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f850 	bl	8003950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e02d      	b.n	8003946 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2224      	movs	r2, #36	@ 0x24
 80038f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f812 	bl	8003950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003970:	e031      	b.n	80039d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003972:	2308      	movs	r3, #8
 8003974:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003976:	2308      	movs	r3, #8
 8003978:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	0e5b      	lsrs	r3, r3, #25
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	0f5b      	lsrs	r3, r3, #29
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	7b3a      	ldrb	r2, [r7, #12]
 800399e:	4911      	ldr	r1, [pc, #68]	@ (80039e4 <UARTEx_SetNbDataToProcess+0x94>)
 80039a0:	5c8a      	ldrb	r2, [r1, r2]
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039a6:	7b3a      	ldrb	r2, [r7, #12]
 80039a8:	490f      	ldr	r1, [pc, #60]	@ (80039e8 <UARTEx_SetNbDataToProcess+0x98>)
 80039aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	7b7a      	ldrb	r2, [r7, #13]
 80039bc:	4909      	ldr	r1, [pc, #36]	@ (80039e4 <UARTEx_SetNbDataToProcess+0x94>)
 80039be:	5c8a      	ldrb	r2, [r1, r2]
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039c4:	7b7a      	ldrb	r2, [r7, #13]
 80039c6:	4908      	ldr	r1, [pc, #32]	@ (80039e8 <UARTEx_SetNbDataToProcess+0x98>)
 80039c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	0800437c 	.word	0x0800437c
 80039e8:	08004384 	.word	0x08004384

080039ec <siprintf>:
 80039ec:	b40e      	push	{r1, r2, r3}
 80039ee:	b500      	push	{lr}
 80039f0:	b09c      	sub	sp, #112	@ 0x70
 80039f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80039f4:	9002      	str	r0, [sp, #8]
 80039f6:	9006      	str	r0, [sp, #24]
 80039f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039fc:	4809      	ldr	r0, [pc, #36]	@ (8003a24 <siprintf+0x38>)
 80039fe:	9107      	str	r1, [sp, #28]
 8003a00:	9104      	str	r1, [sp, #16]
 8003a02:	4909      	ldr	r1, [pc, #36]	@ (8003a28 <siprintf+0x3c>)
 8003a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a08:	9105      	str	r1, [sp, #20]
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	a902      	add	r1, sp, #8
 8003a10:	f000 f994 	bl	8003d3c <_svfiprintf_r>
 8003a14:	9b02      	ldr	r3, [sp, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	b01c      	add	sp, #112	@ 0x70
 8003a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a20:	b003      	add	sp, #12
 8003a22:	4770      	bx	lr
 8003a24:	2000000c 	.word	0x2000000c
 8003a28:	ffff0208 	.word	0xffff0208

08003a2c <memset>:
 8003a2c:	4402      	add	r2, r0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <__errno>:
 8003a3c:	4b01      	ldr	r3, [pc, #4]	@ (8003a44 <__errno+0x8>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a80 <__libc_init_array+0x38>)
 8003a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003a84 <__libc_init_array+0x3c>)
 8003a4e:	1b64      	subs	r4, r4, r5
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	2600      	movs	r6, #0
 8003a54:	42a6      	cmp	r6, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	4d0b      	ldr	r5, [pc, #44]	@ (8003a88 <__libc_init_array+0x40>)
 8003a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a8c <__libc_init_array+0x44>)
 8003a5c:	f000 fc66 	bl	800432c <_init>
 8003a60:	1b64      	subs	r4, r4, r5
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	2600      	movs	r6, #0
 8003a66:	42a6      	cmp	r6, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a70:	4798      	blx	r3
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7a:	4798      	blx	r3
 8003a7c:	3601      	adds	r6, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	080043c8 	.word	0x080043c8
 8003a84:	080043c8 	.word	0x080043c8
 8003a88:	080043c8 	.word	0x080043c8
 8003a8c:	080043cc 	.word	0x080043cc

08003a90 <__retarget_lock_acquire_recursive>:
 8003a90:	4770      	bx	lr

08003a92 <__retarget_lock_release_recursive>:
 8003a92:	4770      	bx	lr

08003a94 <_free_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4605      	mov	r5, r0
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d041      	beq.n	8003b20 <_free_r+0x8c>
 8003a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aa0:	1f0c      	subs	r4, r1, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bfb8      	it	lt
 8003aa6:	18e4      	addlt	r4, r4, r3
 8003aa8:	f000 f8e0 	bl	8003c6c <__malloc_lock>
 8003aac:	4a1d      	ldr	r2, [pc, #116]	@ (8003b24 <_free_r+0x90>)
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	b933      	cbnz	r3, 8003ac0 <_free_r+0x2c>
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	6014      	str	r4, [r2, #0]
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003abc:	f000 b8dc 	b.w	8003c78 <__malloc_unlock>
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d908      	bls.n	8003ad6 <_free_r+0x42>
 8003ac4:	6820      	ldr	r0, [r4, #0]
 8003ac6:	1821      	adds	r1, r4, r0
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	bf01      	itttt	eq
 8003acc:	6819      	ldreq	r1, [r3, #0]
 8003ace:	685b      	ldreq	r3, [r3, #4]
 8003ad0:	1809      	addeq	r1, r1, r0
 8003ad2:	6021      	streq	r1, [r4, #0]
 8003ad4:	e7ed      	b.n	8003ab2 <_free_r+0x1e>
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	b10b      	cbz	r3, 8003ae0 <_free_r+0x4c>
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d9fa      	bls.n	8003ad6 <_free_r+0x42>
 8003ae0:	6811      	ldr	r1, [r2, #0]
 8003ae2:	1850      	adds	r0, r2, r1
 8003ae4:	42a0      	cmp	r0, r4
 8003ae6:	d10b      	bne.n	8003b00 <_free_r+0x6c>
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	4401      	add	r1, r0
 8003aec:	1850      	adds	r0, r2, r1
 8003aee:	4283      	cmp	r3, r0
 8003af0:	6011      	str	r1, [r2, #0]
 8003af2:	d1e0      	bne.n	8003ab6 <_free_r+0x22>
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	6053      	str	r3, [r2, #4]
 8003afa:	4408      	add	r0, r1
 8003afc:	6010      	str	r0, [r2, #0]
 8003afe:	e7da      	b.n	8003ab6 <_free_r+0x22>
 8003b00:	d902      	bls.n	8003b08 <_free_r+0x74>
 8003b02:	230c      	movs	r3, #12
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	e7d6      	b.n	8003ab6 <_free_r+0x22>
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	1821      	adds	r1, r4, r0
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	bf04      	itt	eq
 8003b10:	6819      	ldreq	r1, [r3, #0]
 8003b12:	685b      	ldreq	r3, [r3, #4]
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	bf04      	itt	eq
 8003b18:	1809      	addeq	r1, r1, r0
 8003b1a:	6021      	streq	r1, [r4, #0]
 8003b1c:	6054      	str	r4, [r2, #4]
 8003b1e:	e7ca      	b.n	8003ab6 <_free_r+0x22>
 8003b20:	bd38      	pop	{r3, r4, r5, pc}
 8003b22:	bf00      	nop
 8003b24:	20000350 	.word	0x20000350

08003b28 <sbrk_aligned>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b68 <sbrk_aligned+0x40>)
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	6831      	ldr	r1, [r6, #0]
 8003b30:	4605      	mov	r5, r0
 8003b32:	b911      	cbnz	r1, 8003b3a <sbrk_aligned+0x12>
 8003b34:	f000 fba6 	bl	8004284 <_sbrk_r>
 8003b38:	6030      	str	r0, [r6, #0]
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 fba1 	bl	8004284 <_sbrk_r>
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	d103      	bne.n	8003b4e <sbrk_aligned+0x26>
 8003b46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
 8003b4e:	1cc4      	adds	r4, r0, #3
 8003b50:	f024 0403 	bic.w	r4, r4, #3
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d0f8      	beq.n	8003b4a <sbrk_aligned+0x22>
 8003b58:	1a21      	subs	r1, r4, r0
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 fb92 	bl	8004284 <_sbrk_r>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d1f2      	bne.n	8003b4a <sbrk_aligned+0x22>
 8003b64:	e7ef      	b.n	8003b46 <sbrk_aligned+0x1e>
 8003b66:	bf00      	nop
 8003b68:	2000034c 	.word	0x2000034c

08003b6c <_malloc_r>:
 8003b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b70:	1ccd      	adds	r5, r1, #3
 8003b72:	f025 0503 	bic.w	r5, r5, #3
 8003b76:	3508      	adds	r5, #8
 8003b78:	2d0c      	cmp	r5, #12
 8003b7a:	bf38      	it	cc
 8003b7c:	250c      	movcc	r5, #12
 8003b7e:	2d00      	cmp	r5, #0
 8003b80:	4606      	mov	r6, r0
 8003b82:	db01      	blt.n	8003b88 <_malloc_r+0x1c>
 8003b84:	42a9      	cmp	r1, r5
 8003b86:	d904      	bls.n	8003b92 <_malloc_r+0x26>
 8003b88:	230c      	movs	r3, #12
 8003b8a:	6033      	str	r3, [r6, #0]
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c68 <_malloc_r+0xfc>
 8003b96:	f000 f869 	bl	8003c6c <__malloc_lock>
 8003b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9e:	461c      	mov	r4, r3
 8003ba0:	bb44      	cbnz	r4, 8003bf4 <_malloc_r+0x88>
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f7ff ffbf 	bl	8003b28 <sbrk_aligned>
 8003baa:	1c43      	adds	r3, r0, #1
 8003bac:	4604      	mov	r4, r0
 8003bae:	d158      	bne.n	8003c62 <_malloc_r+0xf6>
 8003bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bb4:	4627      	mov	r7, r4
 8003bb6:	2f00      	cmp	r7, #0
 8003bb8:	d143      	bne.n	8003c42 <_malloc_r+0xd6>
 8003bba:	2c00      	cmp	r4, #0
 8003bbc:	d04b      	beq.n	8003c56 <_malloc_r+0xea>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	4639      	mov	r1, r7
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	eb04 0903 	add.w	r9, r4, r3
 8003bc8:	f000 fb5c 	bl	8004284 <_sbrk_r>
 8003bcc:	4581      	cmp	r9, r0
 8003bce:	d142      	bne.n	8003c56 <_malloc_r+0xea>
 8003bd0:	6821      	ldr	r1, [r4, #0]
 8003bd2:	1a6d      	subs	r5, r5, r1
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f7ff ffa6 	bl	8003b28 <sbrk_aligned>
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d03a      	beq.n	8003c56 <_malloc_r+0xea>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	442b      	add	r3, r5
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	bb62      	cbnz	r2, 8003c48 <_malloc_r+0xdc>
 8003bee:	f8c8 7000 	str.w	r7, [r8]
 8003bf2:	e00f      	b.n	8003c14 <_malloc_r+0xa8>
 8003bf4:	6822      	ldr	r2, [r4, #0]
 8003bf6:	1b52      	subs	r2, r2, r5
 8003bf8:	d420      	bmi.n	8003c3c <_malloc_r+0xd0>
 8003bfa:	2a0b      	cmp	r2, #11
 8003bfc:	d917      	bls.n	8003c2e <_malloc_r+0xc2>
 8003bfe:	1961      	adds	r1, r4, r5
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	6025      	str	r5, [r4, #0]
 8003c04:	bf18      	it	ne
 8003c06:	6059      	strne	r1, [r3, #4]
 8003c08:	6863      	ldr	r3, [r4, #4]
 8003c0a:	bf08      	it	eq
 8003c0c:	f8c8 1000 	streq.w	r1, [r8]
 8003c10:	5162      	str	r2, [r4, r5]
 8003c12:	604b      	str	r3, [r1, #4]
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f82f 	bl	8003c78 <__malloc_unlock>
 8003c1a:	f104 000b 	add.w	r0, r4, #11
 8003c1e:	1d23      	adds	r3, r4, #4
 8003c20:	f020 0007 	bic.w	r0, r0, #7
 8003c24:	1ac2      	subs	r2, r0, r3
 8003c26:	bf1c      	itt	ne
 8003c28:	1a1b      	subne	r3, r3, r0
 8003c2a:	50a3      	strne	r3, [r4, r2]
 8003c2c:	e7af      	b.n	8003b8e <_malloc_r+0x22>
 8003c2e:	6862      	ldr	r2, [r4, #4]
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	bf0c      	ite	eq
 8003c34:	f8c8 2000 	streq.w	r2, [r8]
 8003c38:	605a      	strne	r2, [r3, #4]
 8003c3a:	e7eb      	b.n	8003c14 <_malloc_r+0xa8>
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	6864      	ldr	r4, [r4, #4]
 8003c40:	e7ae      	b.n	8003ba0 <_malloc_r+0x34>
 8003c42:	463c      	mov	r4, r7
 8003c44:	687f      	ldr	r7, [r7, #4]
 8003c46:	e7b6      	b.n	8003bb6 <_malloc_r+0x4a>
 8003c48:	461a      	mov	r2, r3
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d1fb      	bne.n	8003c48 <_malloc_r+0xdc>
 8003c50:	2300      	movs	r3, #0
 8003c52:	6053      	str	r3, [r2, #4]
 8003c54:	e7de      	b.n	8003c14 <_malloc_r+0xa8>
 8003c56:	230c      	movs	r3, #12
 8003c58:	6033      	str	r3, [r6, #0]
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f000 f80c 	bl	8003c78 <__malloc_unlock>
 8003c60:	e794      	b.n	8003b8c <_malloc_r+0x20>
 8003c62:	6005      	str	r5, [r0, #0]
 8003c64:	e7d6      	b.n	8003c14 <_malloc_r+0xa8>
 8003c66:	bf00      	nop
 8003c68:	20000350 	.word	0x20000350

08003c6c <__malloc_lock>:
 8003c6c:	4801      	ldr	r0, [pc, #4]	@ (8003c74 <__malloc_lock+0x8>)
 8003c6e:	f7ff bf0f 	b.w	8003a90 <__retarget_lock_acquire_recursive>
 8003c72:	bf00      	nop
 8003c74:	20000348 	.word	0x20000348

08003c78 <__malloc_unlock>:
 8003c78:	4801      	ldr	r0, [pc, #4]	@ (8003c80 <__malloc_unlock+0x8>)
 8003c7a:	f7ff bf0a 	b.w	8003a92 <__retarget_lock_release_recursive>
 8003c7e:	bf00      	nop
 8003c80:	20000348 	.word	0x20000348

08003c84 <__ssputs_r>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	688e      	ldr	r6, [r1, #8]
 8003c8a:	461f      	mov	r7, r3
 8003c8c:	42be      	cmp	r6, r7
 8003c8e:	680b      	ldr	r3, [r1, #0]
 8003c90:	4682      	mov	sl, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	4690      	mov	r8, r2
 8003c96:	d82d      	bhi.n	8003cf4 <__ssputs_r+0x70>
 8003c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ca0:	d026      	beq.n	8003cf0 <__ssputs_r+0x6c>
 8003ca2:	6965      	ldr	r5, [r4, #20]
 8003ca4:	6909      	ldr	r1, [r1, #16]
 8003ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003caa:	eba3 0901 	sub.w	r9, r3, r1
 8003cae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cb2:	1c7b      	adds	r3, r7, #1
 8003cb4:	444b      	add	r3, r9
 8003cb6:	106d      	asrs	r5, r5, #1
 8003cb8:	429d      	cmp	r5, r3
 8003cba:	bf38      	it	cc
 8003cbc:	461d      	movcc	r5, r3
 8003cbe:	0553      	lsls	r3, r2, #21
 8003cc0:	d527      	bpl.n	8003d12 <__ssputs_r+0x8e>
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7ff ff52 	bl	8003b6c <_malloc_r>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	b360      	cbz	r0, 8003d26 <__ssputs_r+0xa2>
 8003ccc:	6921      	ldr	r1, [r4, #16]
 8003cce:	464a      	mov	r2, r9
 8003cd0:	f000 fae8 	bl	80042a4 <memcpy>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	6126      	str	r6, [r4, #16]
 8003ce2:	6165      	str	r5, [r4, #20]
 8003ce4:	444e      	add	r6, r9
 8003ce6:	eba5 0509 	sub.w	r5, r5, r9
 8003cea:	6026      	str	r6, [r4, #0]
 8003cec:	60a5      	str	r5, [r4, #8]
 8003cee:	463e      	mov	r6, r7
 8003cf0:	42be      	cmp	r6, r7
 8003cf2:	d900      	bls.n	8003cf6 <__ssputs_r+0x72>
 8003cf4:	463e      	mov	r6, r7
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	f000 faa8 	bl	8004250 <memmove>
 8003d00:	68a3      	ldr	r3, [r4, #8]
 8003d02:	1b9b      	subs	r3, r3, r6
 8003d04:	60a3      	str	r3, [r4, #8]
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	4433      	add	r3, r6
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d12:	462a      	mov	r2, r5
 8003d14:	f000 fad4 	bl	80042c0 <_realloc_r>
 8003d18:	4606      	mov	r6, r0
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d1e0      	bne.n	8003ce0 <__ssputs_r+0x5c>
 8003d1e:	6921      	ldr	r1, [r4, #16]
 8003d20:	4650      	mov	r0, sl
 8003d22:	f7ff feb7 	bl	8003a94 <_free_r>
 8003d26:	230c      	movs	r3, #12
 8003d28:	f8ca 3000 	str.w	r3, [sl]
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d38:	e7e9      	b.n	8003d0e <__ssputs_r+0x8a>
	...

08003d3c <_svfiprintf_r>:
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	4698      	mov	r8, r3
 8003d42:	898b      	ldrh	r3, [r1, #12]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	b09d      	sub	sp, #116	@ 0x74
 8003d48:	4607      	mov	r7, r0
 8003d4a:	460d      	mov	r5, r1
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	d510      	bpl.n	8003d72 <_svfiprintf_r+0x36>
 8003d50:	690b      	ldr	r3, [r1, #16]
 8003d52:	b973      	cbnz	r3, 8003d72 <_svfiprintf_r+0x36>
 8003d54:	2140      	movs	r1, #64	@ 0x40
 8003d56:	f7ff ff09 	bl	8003b6c <_malloc_r>
 8003d5a:	6028      	str	r0, [r5, #0]
 8003d5c:	6128      	str	r0, [r5, #16]
 8003d5e:	b930      	cbnz	r0, 8003d6e <_svfiprintf_r+0x32>
 8003d60:	230c      	movs	r3, #12
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d68:	b01d      	add	sp, #116	@ 0x74
 8003d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6e:	2340      	movs	r3, #64	@ 0x40
 8003d70:	616b      	str	r3, [r5, #20]
 8003d72:	2300      	movs	r3, #0
 8003d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d76:	2320      	movs	r3, #32
 8003d78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d80:	2330      	movs	r3, #48	@ 0x30
 8003d82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f20 <_svfiprintf_r+0x1e4>
 8003d86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d8a:	f04f 0901 	mov.w	r9, #1
 8003d8e:	4623      	mov	r3, r4
 8003d90:	469a      	mov	sl, r3
 8003d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d96:	b10a      	cbz	r2, 8003d9c <_svfiprintf_r+0x60>
 8003d98:	2a25      	cmp	r2, #37	@ 0x25
 8003d9a:	d1f9      	bne.n	8003d90 <_svfiprintf_r+0x54>
 8003d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003da0:	d00b      	beq.n	8003dba <_svfiprintf_r+0x7e>
 8003da2:	465b      	mov	r3, fp
 8003da4:	4622      	mov	r2, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	4638      	mov	r0, r7
 8003daa:	f7ff ff6b 	bl	8003c84 <__ssputs_r>
 8003dae:	3001      	adds	r0, #1
 8003db0:	f000 80a7 	beq.w	8003f02 <_svfiprintf_r+0x1c6>
 8003db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003db6:	445a      	add	r2, fp
 8003db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dba:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 809f 	beq.w	8003f02 <_svfiprintf_r+0x1c6>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dce:	f10a 0a01 	add.w	sl, sl, #1
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	9307      	str	r3, [sp, #28]
 8003dd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dda:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ddc:	4654      	mov	r4, sl
 8003dde:	2205      	movs	r2, #5
 8003de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de4:	484e      	ldr	r0, [pc, #312]	@ (8003f20 <_svfiprintf_r+0x1e4>)
 8003de6:	f7fc fa1b 	bl	8000220 <memchr>
 8003dea:	9a04      	ldr	r2, [sp, #16]
 8003dec:	b9d8      	cbnz	r0, 8003e26 <_svfiprintf_r+0xea>
 8003dee:	06d0      	lsls	r0, r2, #27
 8003df0:	bf44      	itt	mi
 8003df2:	2320      	movmi	r3, #32
 8003df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003df8:	0711      	lsls	r1, r2, #28
 8003dfa:	bf44      	itt	mi
 8003dfc:	232b      	movmi	r3, #43	@ 0x2b
 8003dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e08:	d015      	beq.n	8003e36 <_svfiprintf_r+0xfa>
 8003e0a:	9a07      	ldr	r2, [sp, #28]
 8003e0c:	4654      	mov	r4, sl
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f04f 0c0a 	mov.w	ip, #10
 8003e14:	4621      	mov	r1, r4
 8003e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e1a:	3b30      	subs	r3, #48	@ 0x30
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d94b      	bls.n	8003eb8 <_svfiprintf_r+0x17c>
 8003e20:	b1b0      	cbz	r0, 8003e50 <_svfiprintf_r+0x114>
 8003e22:	9207      	str	r2, [sp, #28]
 8003e24:	e014      	b.n	8003e50 <_svfiprintf_r+0x114>
 8003e26:	eba0 0308 	sub.w	r3, r0, r8
 8003e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	9304      	str	r3, [sp, #16]
 8003e32:	46a2      	mov	sl, r4
 8003e34:	e7d2      	b.n	8003ddc <_svfiprintf_r+0xa0>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	9103      	str	r1, [sp, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfbb      	ittet	lt
 8003e42:	425b      	neglt	r3, r3
 8003e44:	f042 0202 	orrlt.w	r2, r2, #2
 8003e48:	9307      	strge	r3, [sp, #28]
 8003e4a:	9307      	strlt	r3, [sp, #28]
 8003e4c:	bfb8      	it	lt
 8003e4e:	9204      	strlt	r2, [sp, #16]
 8003e50:	7823      	ldrb	r3, [r4, #0]
 8003e52:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e54:	d10a      	bne.n	8003e6c <_svfiprintf_r+0x130>
 8003e56:	7863      	ldrb	r3, [r4, #1]
 8003e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e5a:	d132      	bne.n	8003ec2 <_svfiprintf_r+0x186>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	9203      	str	r2, [sp, #12]
 8003e64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e68:	3402      	adds	r4, #2
 8003e6a:	9305      	str	r3, [sp, #20]
 8003e6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f30 <_svfiprintf_r+0x1f4>
 8003e70:	7821      	ldrb	r1, [r4, #0]
 8003e72:	2203      	movs	r2, #3
 8003e74:	4650      	mov	r0, sl
 8003e76:	f7fc f9d3 	bl	8000220 <memchr>
 8003e7a:	b138      	cbz	r0, 8003e8c <_svfiprintf_r+0x150>
 8003e7c:	9b04      	ldr	r3, [sp, #16]
 8003e7e:	eba0 000a 	sub.w	r0, r0, sl
 8003e82:	2240      	movs	r2, #64	@ 0x40
 8003e84:	4082      	lsls	r2, r0
 8003e86:	4313      	orrs	r3, r2
 8003e88:	3401      	adds	r4, #1
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e90:	4824      	ldr	r0, [pc, #144]	@ (8003f24 <_svfiprintf_r+0x1e8>)
 8003e92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e96:	2206      	movs	r2, #6
 8003e98:	f7fc f9c2 	bl	8000220 <memchr>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d036      	beq.n	8003f0e <_svfiprintf_r+0x1d2>
 8003ea0:	4b21      	ldr	r3, [pc, #132]	@ (8003f28 <_svfiprintf_r+0x1ec>)
 8003ea2:	bb1b      	cbnz	r3, 8003eec <_svfiprintf_r+0x1b0>
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	f023 0307 	bic.w	r3, r3, #7
 8003eac:	3308      	adds	r3, #8
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eb2:	4433      	add	r3, r6
 8003eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eb6:	e76a      	b.n	8003d8e <_svfiprintf_r+0x52>
 8003eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	e7a8      	b.n	8003e14 <_svfiprintf_r+0xd8>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	3401      	adds	r4, #1
 8003ec6:	9305      	str	r3, [sp, #20]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f04f 0c0a 	mov.w	ip, #10
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ed4:	3a30      	subs	r2, #48	@ 0x30
 8003ed6:	2a09      	cmp	r2, #9
 8003ed8:	d903      	bls.n	8003ee2 <_svfiprintf_r+0x1a6>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0c6      	beq.n	8003e6c <_svfiprintf_r+0x130>
 8003ede:	9105      	str	r1, [sp, #20]
 8003ee0:	e7c4      	b.n	8003e6c <_svfiprintf_r+0x130>
 8003ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e7f0      	b.n	8003ece <_svfiprintf_r+0x192>
 8003eec:	ab03      	add	r3, sp, #12
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	462a      	mov	r2, r5
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f2c <_svfiprintf_r+0x1f0>)
 8003ef4:	a904      	add	r1, sp, #16
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f3af 8000 	nop.w
 8003efc:	1c42      	adds	r2, r0, #1
 8003efe:	4606      	mov	r6, r0
 8003f00:	d1d6      	bne.n	8003eb0 <_svfiprintf_r+0x174>
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	065b      	lsls	r3, r3, #25
 8003f06:	f53f af2d 	bmi.w	8003d64 <_svfiprintf_r+0x28>
 8003f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f0c:	e72c      	b.n	8003d68 <_svfiprintf_r+0x2c>
 8003f0e:	ab03      	add	r3, sp, #12
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	462a      	mov	r2, r5
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <_svfiprintf_r+0x1f0>)
 8003f16:	a904      	add	r1, sp, #16
 8003f18:	4638      	mov	r0, r7
 8003f1a:	f000 f879 	bl	8004010 <_printf_i>
 8003f1e:	e7ed      	b.n	8003efc <_svfiprintf_r+0x1c0>
 8003f20:	0800438c 	.word	0x0800438c
 8003f24:	08004396 	.word	0x08004396
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	08003c85 	.word	0x08003c85
 8003f30:	08004392 	.word	0x08004392

08003f34 <_printf_common>:
 8003f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	4616      	mov	r6, r2
 8003f3a:	4698      	mov	r8, r3
 8003f3c:	688a      	ldr	r2, [r1, #8]
 8003f3e:	690b      	ldr	r3, [r1, #16]
 8003f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bfb8      	it	lt
 8003f48:	4613      	movlt	r3, r2
 8003f4a:	6033      	str	r3, [r6, #0]
 8003f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f50:	4607      	mov	r7, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	b10a      	cbz	r2, 8003f5a <_printf_common+0x26>
 8003f56:	3301      	adds	r3, #1
 8003f58:	6033      	str	r3, [r6, #0]
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	0699      	lsls	r1, r3, #26
 8003f5e:	bf42      	ittt	mi
 8003f60:	6833      	ldrmi	r3, [r6, #0]
 8003f62:	3302      	addmi	r3, #2
 8003f64:	6033      	strmi	r3, [r6, #0]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	f015 0506 	ands.w	r5, r5, #6
 8003f6c:	d106      	bne.n	8003f7c <_printf_common+0x48>
 8003f6e:	f104 0a19 	add.w	sl, r4, #25
 8003f72:	68e3      	ldr	r3, [r4, #12]
 8003f74:	6832      	ldr	r2, [r6, #0]
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	dc26      	bgt.n	8003fca <_printf_common+0x96>
 8003f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	3b00      	subs	r3, #0
 8003f84:	bf18      	it	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	0692      	lsls	r2, r2, #26
 8003f8a:	d42b      	bmi.n	8003fe4 <_printf_common+0xb0>
 8003f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f90:	4641      	mov	r1, r8
 8003f92:	4638      	mov	r0, r7
 8003f94:	47c8      	blx	r9
 8003f96:	3001      	adds	r0, #1
 8003f98:	d01e      	beq.n	8003fd8 <_printf_common+0xa4>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	f003 0306 	and.w	r3, r3, #6
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	bf02      	ittt	eq
 8003fa6:	68e5      	ldreq	r5, [r4, #12]
 8003fa8:	6833      	ldreq	r3, [r6, #0]
 8003faa:	1aed      	subeq	r5, r5, r3
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	bf0c      	ite	eq
 8003fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fb4:	2500      	movne	r5, #0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	bfc4      	itt	gt
 8003fba:	1a9b      	subgt	r3, r3, r2
 8003fbc:	18ed      	addgt	r5, r5, r3
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	341a      	adds	r4, #26
 8003fc2:	42b5      	cmp	r5, r6
 8003fc4:	d11a      	bne.n	8003ffc <_printf_common+0xc8>
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e008      	b.n	8003fdc <_printf_common+0xa8>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4652      	mov	r2, sl
 8003fce:	4641      	mov	r1, r8
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	47c8      	blx	r9
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d103      	bne.n	8003fe0 <_printf_common+0xac>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	3501      	adds	r5, #1
 8003fe2:	e7c6      	b.n	8003f72 <_printf_common+0x3e>
 8003fe4:	18e1      	adds	r1, r4, r3
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	2030      	movs	r0, #48	@ 0x30
 8003fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fee:	4422      	add	r2, r4
 8003ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	e7c7      	b.n	8003f8c <_printf_common+0x58>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4622      	mov	r2, r4
 8004000:	4641      	mov	r1, r8
 8004002:	4638      	mov	r0, r7
 8004004:	47c8      	blx	r9
 8004006:	3001      	adds	r0, #1
 8004008:	d0e6      	beq.n	8003fd8 <_printf_common+0xa4>
 800400a:	3601      	adds	r6, #1
 800400c:	e7d9      	b.n	8003fc2 <_printf_common+0x8e>
	...

08004010 <_printf_i>:
 8004010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	7e0f      	ldrb	r7, [r1, #24]
 8004016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004018:	2f78      	cmp	r7, #120	@ 0x78
 800401a:	4691      	mov	r9, r2
 800401c:	4680      	mov	r8, r0
 800401e:	460c      	mov	r4, r1
 8004020:	469a      	mov	sl, r3
 8004022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004026:	d807      	bhi.n	8004038 <_printf_i+0x28>
 8004028:	2f62      	cmp	r7, #98	@ 0x62
 800402a:	d80a      	bhi.n	8004042 <_printf_i+0x32>
 800402c:	2f00      	cmp	r7, #0
 800402e:	f000 80d2 	beq.w	80041d6 <_printf_i+0x1c6>
 8004032:	2f58      	cmp	r7, #88	@ 0x58
 8004034:	f000 80b9 	beq.w	80041aa <_printf_i+0x19a>
 8004038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800403c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004040:	e03a      	b.n	80040b8 <_printf_i+0xa8>
 8004042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004046:	2b15      	cmp	r3, #21
 8004048:	d8f6      	bhi.n	8004038 <_printf_i+0x28>
 800404a:	a101      	add	r1, pc, #4	@ (adr r1, 8004050 <_printf_i+0x40>)
 800404c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004050:	080040a9 	.word	0x080040a9
 8004054:	080040bd 	.word	0x080040bd
 8004058:	08004039 	.word	0x08004039
 800405c:	08004039 	.word	0x08004039
 8004060:	08004039 	.word	0x08004039
 8004064:	08004039 	.word	0x08004039
 8004068:	080040bd 	.word	0x080040bd
 800406c:	08004039 	.word	0x08004039
 8004070:	08004039 	.word	0x08004039
 8004074:	08004039 	.word	0x08004039
 8004078:	08004039 	.word	0x08004039
 800407c:	080041bd 	.word	0x080041bd
 8004080:	080040e7 	.word	0x080040e7
 8004084:	08004177 	.word	0x08004177
 8004088:	08004039 	.word	0x08004039
 800408c:	08004039 	.word	0x08004039
 8004090:	080041df 	.word	0x080041df
 8004094:	08004039 	.word	0x08004039
 8004098:	080040e7 	.word	0x080040e7
 800409c:	08004039 	.word	0x08004039
 80040a0:	08004039 	.word	0x08004039
 80040a4:	0800417f 	.word	0x0800417f
 80040a8:	6833      	ldr	r3, [r6, #0]
 80040aa:	1d1a      	adds	r2, r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6032      	str	r2, [r6, #0]
 80040b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040b8:	2301      	movs	r3, #1
 80040ba:	e09d      	b.n	80041f8 <_printf_i+0x1e8>
 80040bc:	6833      	ldr	r3, [r6, #0]
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	1d19      	adds	r1, r3, #4
 80040c2:	6031      	str	r1, [r6, #0]
 80040c4:	0606      	lsls	r6, r0, #24
 80040c6:	d501      	bpl.n	80040cc <_printf_i+0xbc>
 80040c8:	681d      	ldr	r5, [r3, #0]
 80040ca:	e003      	b.n	80040d4 <_printf_i+0xc4>
 80040cc:	0645      	lsls	r5, r0, #25
 80040ce:	d5fb      	bpl.n	80040c8 <_printf_i+0xb8>
 80040d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040d4:	2d00      	cmp	r5, #0
 80040d6:	da03      	bge.n	80040e0 <_printf_i+0xd0>
 80040d8:	232d      	movs	r3, #45	@ 0x2d
 80040da:	426d      	negs	r5, r5
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e0:	4859      	ldr	r0, [pc, #356]	@ (8004248 <_printf_i+0x238>)
 80040e2:	230a      	movs	r3, #10
 80040e4:	e011      	b.n	800410a <_printf_i+0xfa>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	6833      	ldr	r3, [r6, #0]
 80040ea:	0608      	lsls	r0, r1, #24
 80040ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80040f0:	d402      	bmi.n	80040f8 <_printf_i+0xe8>
 80040f2:	0649      	lsls	r1, r1, #25
 80040f4:	bf48      	it	mi
 80040f6:	b2ad      	uxthmi	r5, r5
 80040f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80040fa:	4853      	ldr	r0, [pc, #332]	@ (8004248 <_printf_i+0x238>)
 80040fc:	6033      	str	r3, [r6, #0]
 80040fe:	bf14      	ite	ne
 8004100:	230a      	movne	r3, #10
 8004102:	2308      	moveq	r3, #8
 8004104:	2100      	movs	r1, #0
 8004106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800410a:	6866      	ldr	r6, [r4, #4]
 800410c:	60a6      	str	r6, [r4, #8]
 800410e:	2e00      	cmp	r6, #0
 8004110:	bfa2      	ittt	ge
 8004112:	6821      	ldrge	r1, [r4, #0]
 8004114:	f021 0104 	bicge.w	r1, r1, #4
 8004118:	6021      	strge	r1, [r4, #0]
 800411a:	b90d      	cbnz	r5, 8004120 <_printf_i+0x110>
 800411c:	2e00      	cmp	r6, #0
 800411e:	d04b      	beq.n	80041b8 <_printf_i+0x1a8>
 8004120:	4616      	mov	r6, r2
 8004122:	fbb5 f1f3 	udiv	r1, r5, r3
 8004126:	fb03 5711 	mls	r7, r3, r1, r5
 800412a:	5dc7      	ldrb	r7, [r0, r7]
 800412c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004130:	462f      	mov	r7, r5
 8004132:	42bb      	cmp	r3, r7
 8004134:	460d      	mov	r5, r1
 8004136:	d9f4      	bls.n	8004122 <_printf_i+0x112>
 8004138:	2b08      	cmp	r3, #8
 800413a:	d10b      	bne.n	8004154 <_printf_i+0x144>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	07df      	lsls	r7, r3, #31
 8004140:	d508      	bpl.n	8004154 <_printf_i+0x144>
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	6861      	ldr	r1, [r4, #4]
 8004146:	4299      	cmp	r1, r3
 8004148:	bfde      	ittt	le
 800414a:	2330      	movle	r3, #48	@ 0x30
 800414c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004150:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004154:	1b92      	subs	r2, r2, r6
 8004156:	6122      	str	r2, [r4, #16]
 8004158:	f8cd a000 	str.w	sl, [sp]
 800415c:	464b      	mov	r3, r9
 800415e:	aa03      	add	r2, sp, #12
 8004160:	4621      	mov	r1, r4
 8004162:	4640      	mov	r0, r8
 8004164:	f7ff fee6 	bl	8003f34 <_printf_common>
 8004168:	3001      	adds	r0, #1
 800416a:	d14a      	bne.n	8004202 <_printf_i+0x1f2>
 800416c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004170:	b004      	add	sp, #16
 8004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	f043 0320 	orr.w	r3, r3, #32
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	4833      	ldr	r0, [pc, #204]	@ (800424c <_printf_i+0x23c>)
 8004180:	2778      	movs	r7, #120	@ 0x78
 8004182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	6831      	ldr	r1, [r6, #0]
 800418a:	061f      	lsls	r7, r3, #24
 800418c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004190:	d402      	bmi.n	8004198 <_printf_i+0x188>
 8004192:	065f      	lsls	r7, r3, #25
 8004194:	bf48      	it	mi
 8004196:	b2ad      	uxthmi	r5, r5
 8004198:	6031      	str	r1, [r6, #0]
 800419a:	07d9      	lsls	r1, r3, #31
 800419c:	bf44      	itt	mi
 800419e:	f043 0320 	orrmi.w	r3, r3, #32
 80041a2:	6023      	strmi	r3, [r4, #0]
 80041a4:	b11d      	cbz	r5, 80041ae <_printf_i+0x19e>
 80041a6:	2310      	movs	r3, #16
 80041a8:	e7ac      	b.n	8004104 <_printf_i+0xf4>
 80041aa:	4827      	ldr	r0, [pc, #156]	@ (8004248 <_printf_i+0x238>)
 80041ac:	e7e9      	b.n	8004182 <_printf_i+0x172>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f023 0320 	bic.w	r3, r3, #32
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	e7f6      	b.n	80041a6 <_printf_i+0x196>
 80041b8:	4616      	mov	r6, r2
 80041ba:	e7bd      	b.n	8004138 <_printf_i+0x128>
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	6961      	ldr	r1, [r4, #20]
 80041c2:	1d18      	adds	r0, r3, #4
 80041c4:	6030      	str	r0, [r6, #0]
 80041c6:	062e      	lsls	r6, r5, #24
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	d501      	bpl.n	80041d0 <_printf_i+0x1c0>
 80041cc:	6019      	str	r1, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <_printf_i+0x1c6>
 80041d0:	0668      	lsls	r0, r5, #25
 80041d2:	d5fb      	bpl.n	80041cc <_printf_i+0x1bc>
 80041d4:	8019      	strh	r1, [r3, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	4616      	mov	r6, r2
 80041dc:	e7bc      	b.n	8004158 <_printf_i+0x148>
 80041de:	6833      	ldr	r3, [r6, #0]
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	6032      	str	r2, [r6, #0]
 80041e4:	681e      	ldr	r6, [r3, #0]
 80041e6:	6862      	ldr	r2, [r4, #4]
 80041e8:	2100      	movs	r1, #0
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7fc f818 	bl	8000220 <memchr>
 80041f0:	b108      	cbz	r0, 80041f6 <_printf_i+0x1e6>
 80041f2:	1b80      	subs	r0, r0, r6
 80041f4:	6060      	str	r0, [r4, #4]
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	2300      	movs	r3, #0
 80041fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004200:	e7aa      	b.n	8004158 <_printf_i+0x148>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	4632      	mov	r2, r6
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	47d0      	blx	sl
 800420c:	3001      	adds	r0, #1
 800420e:	d0ad      	beq.n	800416c <_printf_i+0x15c>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	079b      	lsls	r3, r3, #30
 8004214:	d413      	bmi.n	800423e <_printf_i+0x22e>
 8004216:	68e0      	ldr	r0, [r4, #12]
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	4298      	cmp	r0, r3
 800421c:	bfb8      	it	lt
 800421e:	4618      	movlt	r0, r3
 8004220:	e7a6      	b.n	8004170 <_printf_i+0x160>
 8004222:	2301      	movs	r3, #1
 8004224:	4632      	mov	r2, r6
 8004226:	4649      	mov	r1, r9
 8004228:	4640      	mov	r0, r8
 800422a:	47d0      	blx	sl
 800422c:	3001      	adds	r0, #1
 800422e:	d09d      	beq.n	800416c <_printf_i+0x15c>
 8004230:	3501      	adds	r5, #1
 8004232:	68e3      	ldr	r3, [r4, #12]
 8004234:	9903      	ldr	r1, [sp, #12]
 8004236:	1a5b      	subs	r3, r3, r1
 8004238:	42ab      	cmp	r3, r5
 800423a:	dcf2      	bgt.n	8004222 <_printf_i+0x212>
 800423c:	e7eb      	b.n	8004216 <_printf_i+0x206>
 800423e:	2500      	movs	r5, #0
 8004240:	f104 0619 	add.w	r6, r4, #25
 8004244:	e7f5      	b.n	8004232 <_printf_i+0x222>
 8004246:	bf00      	nop
 8004248:	0800439d 	.word	0x0800439d
 800424c:	080043ae 	.word	0x080043ae

08004250 <memmove>:
 8004250:	4288      	cmp	r0, r1
 8004252:	b510      	push	{r4, lr}
 8004254:	eb01 0402 	add.w	r4, r1, r2
 8004258:	d902      	bls.n	8004260 <memmove+0x10>
 800425a:	4284      	cmp	r4, r0
 800425c:	4623      	mov	r3, r4
 800425e:	d807      	bhi.n	8004270 <memmove+0x20>
 8004260:	1e43      	subs	r3, r0, #1
 8004262:	42a1      	cmp	r1, r4
 8004264:	d008      	beq.n	8004278 <memmove+0x28>
 8004266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800426e:	e7f8      	b.n	8004262 <memmove+0x12>
 8004270:	4402      	add	r2, r0
 8004272:	4601      	mov	r1, r0
 8004274:	428a      	cmp	r2, r1
 8004276:	d100      	bne.n	800427a <memmove+0x2a>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800427e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004282:	e7f7      	b.n	8004274 <memmove+0x24>

08004284 <_sbrk_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4d06      	ldr	r5, [pc, #24]	@ (80042a0 <_sbrk_r+0x1c>)
 8004288:	2300      	movs	r3, #0
 800428a:	4604      	mov	r4, r0
 800428c:	4608      	mov	r0, r1
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	f7fc fc34 	bl	8000afc <_sbrk>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d102      	bne.n	800429e <_sbrk_r+0x1a>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	b103      	cbz	r3, 800429e <_sbrk_r+0x1a>
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	bd38      	pop	{r3, r4, r5, pc}
 80042a0:	20000344 	.word	0x20000344

080042a4 <memcpy>:
 80042a4:	440a      	add	r2, r1
 80042a6:	4291      	cmp	r1, r2
 80042a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80042ac:	d100      	bne.n	80042b0 <memcpy+0xc>
 80042ae:	4770      	bx	lr
 80042b0:	b510      	push	{r4, lr}
 80042b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ba:	4291      	cmp	r1, r2
 80042bc:	d1f9      	bne.n	80042b2 <memcpy+0xe>
 80042be:	bd10      	pop	{r4, pc}

080042c0 <_realloc_r>:
 80042c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c4:	4680      	mov	r8, r0
 80042c6:	4615      	mov	r5, r2
 80042c8:	460c      	mov	r4, r1
 80042ca:	b921      	cbnz	r1, 80042d6 <_realloc_r+0x16>
 80042cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042d0:	4611      	mov	r1, r2
 80042d2:	f7ff bc4b 	b.w	8003b6c <_malloc_r>
 80042d6:	b92a      	cbnz	r2, 80042e4 <_realloc_r+0x24>
 80042d8:	f7ff fbdc 	bl	8003a94 <_free_r>
 80042dc:	2400      	movs	r4, #0
 80042de:	4620      	mov	r0, r4
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e4:	f000 f81a 	bl	800431c <_malloc_usable_size_r>
 80042e8:	4285      	cmp	r5, r0
 80042ea:	4606      	mov	r6, r0
 80042ec:	d802      	bhi.n	80042f4 <_realloc_r+0x34>
 80042ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042f2:	d8f4      	bhi.n	80042de <_realloc_r+0x1e>
 80042f4:	4629      	mov	r1, r5
 80042f6:	4640      	mov	r0, r8
 80042f8:	f7ff fc38 	bl	8003b6c <_malloc_r>
 80042fc:	4607      	mov	r7, r0
 80042fe:	2800      	cmp	r0, #0
 8004300:	d0ec      	beq.n	80042dc <_realloc_r+0x1c>
 8004302:	42b5      	cmp	r5, r6
 8004304:	462a      	mov	r2, r5
 8004306:	4621      	mov	r1, r4
 8004308:	bf28      	it	cs
 800430a:	4632      	movcs	r2, r6
 800430c:	f7ff ffca 	bl	80042a4 <memcpy>
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fbbe 	bl	8003a94 <_free_r>
 8004318:	463c      	mov	r4, r7
 800431a:	e7e0      	b.n	80042de <_realloc_r+0x1e>

0800431c <_malloc_usable_size_r>:
 800431c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004320:	1f18      	subs	r0, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfbc      	itt	lt
 8004326:	580b      	ldrlt	r3, [r1, r0]
 8004328:	18c0      	addlt	r0, r0, r3
 800432a:	4770      	bx	lr

0800432c <_init>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr

08004338 <_fini>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr
